AWSTemplateFormatVersion: "2010-09-09"
Description: "Supporting resources for SAP GenAI assistant powered by Agents and Knowledge base for Amazon Bedrock"
Metadata:
  LICENSE: >-
    Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

    Permission is hereby granted, free of charge, to any person obtaining a copy of this
    software and associated documentation files (the "Software"), to deal in the Software
    without restriction, including without limitation the rights to use, copy, modify,
    merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Parameters:

   ParentStackName:
     Description: Calling stack name
     Type: String 
   S3BucketName:
     Type: String
     Description: Name of the S3 bucket containing the deployment zip
   S3KeyName:
     Type: String
     Description: Key name of the deployment zip file in S3
     Default: deployment.zip
   SecurityGroupId:
     Description: Security group for Lambda
     Type: String
     Default: your-security-group-name
   SubnetId01:
     Description: Private subnet id for Lambda
     Type: String
     Default: your-priv-subnet-id-01
   SubnetId02:
     Description: Private subnet id for Lambda
     Type: String
     Default: your-priv-subnet-id-02

Resources:
  # Cognito Resources
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${ParentStackName}-SecureUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
      DeletionProtection: INACTIVE

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${ParentStackName}-WebClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub ${ParentStackName}-IDP
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # IAM Roles
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: BasicAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Identity Pool specific permissions
              - Effect: Allow
                Action:
                  - cognito-identity:GetCredentialsForIdentity
                  - cognito-identity:GetId
                Resource: !Sub 'arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/${IdentityPool}'
              
              # User Pool specific permissions
              - Effect: Allow
                Action:
                  - cognito-idp:GetUser
                  - cognito-idp:UpdateUserAttributes
                  - cognito-idp:VerifyUserAttribute
                Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}'
              
              # Token-related permissions
              - Effect: Allow
                Action:
                  - cognito-idp:InitiateAuth
                  - cognito-idp:RespondToAuthChallenge
                Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}/client/${UserPoolClient}'
        
        - PolicyName: BedrockAgentAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeAgent
                  - bedrock:InvokeAgentWithSchema
                  - bedrock:InvokeAgent2
                Resource:
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/*'

  AmplifyServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: amplify.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AmplifyS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:GetObjectAcl
                  - s3:PutObjectAcl
                Resource:
                  - !Sub arn:aws:s3:::${S3BucketName}/*
                  - !Sub arn:aws:s3:::${S3BucketName}

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: AmplifyAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - amplify:StartDeployment
                Resource: !Sub arn:aws:amplify:${AWS::Region}:${AWS::AccountId}:apps/${AmplifyApp.AppId}/*
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:GetObjectAcl
                  - s3:PutObjectAcl
                Resource:
                  - !Sub arn:aws:s3:::${S3BucketName}
                  - !Sub arn:aws:s3:::${S3BucketName}/*

  # Cognito Role Attachment
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn

  # Amplify Resources
  AmplifyApp:
    Type: AWS::Amplify::App
    DependsOn: AmplifyServiceRole
    Properties:
      Name: !Sub ${ParentStackName}-BedrockChatApp
      Platform: WEB
      EnableBranchAutoDeletion: false
      IAMServiceRole: !GetAtt AmplifyServiceRole.Arn
      EnvironmentVariables:
        - Name: COGNITO_USER_POOL_ID
          Value: !Ref UserPool
        - Name: COGNITO_USER_POOL_CLIENT_ID
          Value: !Ref UserPoolClient
        - Name: COGNITO_IDENTITY_POOL_ID
          Value: !Ref IdentityPool
        - Name: REGION
          Value: !Ref 'AWS::Region'

  AmplifyBranch:
    Type: AWS::Amplify::Branch
    DependsOn: AmplifyApp
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: main
      EnableAutoBuild: false
      Stage: PRODUCTION

  # S3 Bucket Policy
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowAmplifyToReadAllDeploymentZips
            Effect: Allow
            Principal:
              Service: amplify.amazonaws.com
            Action:
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:ListBucket
              - s3:GetObjectVersion
              - s3:GetBucketLocation
            Resource:
              - !Sub arn:aws:s3:::${S3BucketName}
              - !Sub arn:aws:s3:::${S3BucketName}/*
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
          - Sid: AllowLambdaRoleRead
            Effect: Allow
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
            Action:
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:ListBucket
              - s3:GetObjectVersion
              - s3:GetBucketLocation
            Resource:
              - !Sub arn:aws:s3:::${S3BucketName}
              - !Sub arn:aws:s3:::${S3BucketName}/*

  # Lambda Function for Deployment
  TriggerDeploymentFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Handler: index.handler
      VpcConfig:
        SecurityGroupIds:
            - !Ref SecurityGroupId
        SubnetIds:
            - !Ref SubnetId01
            - !Ref SubnetId02
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info(f"Received event: {event}")
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      app_id = event['ResourceProperties']['AppId']
                      branch_name = event['ResourceProperties']['BranchName']
                      s3_bucket = event['ResourceProperties']['S3BucketName']
                      s3_key = event['ResourceProperties']['S3KeyName']
                      source_url = f's3://{s3_bucket}/{s3_key}'

                      amplify = boto3.client('amplify')
                      resp = amplify.start_deployment(
                          appId=app_id,
                          branchName=branch_name,
                          sourceUrl=source_url,
                          sourceUrlType='ZIP'
                      )

                      job_summary = resp.get('jobSummary', {})
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'JobId': job_summary.get('jobId', ''),
                          'Status': job_summary.get('status', '')
                      })
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  logger.error(f"Failed to process request: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

  # Deployment Trigger
  TriggerDeployment:
    Type: Custom::AmplifyDeployment
    DependsOn: AmplifyBranch
    Properties:
      ServiceToken: !GetAtt TriggerDeploymentFunction.Arn
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: main
      S3BucketName: !Ref S3BucketName
      S3KeyName: !Ref S3KeyName

# Outputs
Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient

  IdentityPoolId:
    Description: Cognito Identity Pool ID
    Value: !Ref IdentityPool

  Region:
    Description: AWS Region
    Value: !Ref 'AWS::Region'

  AmplifyAppId:
    Description: Amplify App ID
    Value: !GetAtt AmplifyApp.AppId

  AppURL:
    Description: Application URL
    Value: !Sub https://main.${AmplifyApp.DefaultDomain}
